{"version":3,"sources":["components/LoginButton.tsx","utils/refreshTokenSetup.tsx","components/LogoutButton.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["clientId","process","REACT_APP_GOOGLE_CLIENT_ID","LoginButton","signIn","useGoogleLogin","onSuccess","res","profileObj","isOnline","code","isOffline","console","log","refreshTiming","tokenObj","expires_in","refreshToken","a","reloadAuthResponse","newAuthRes","id_token","setTimeout","refreshTokenSetup","onFailure","isSignedIn","accessType","onClick","className","LogoutButton","signOut","useGoogleLogout","onLogoutSuccess","alert","App","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAQMA,EAAWC,mIAAYC,4BAA8B,GAgBpD,SAASC,IACd,IAaQC,EAAWC,yBAAe,CAChCC,UAdgB,SAACC,IAfJ,SAACA,GAChB,QAAKA,EAA4BC,WAe3BC,CAASF,GATC,SAACA,GACjB,QAAKA,EAAmCG,KAW3BC,CAAUJ,IACnBK,QAAQC,IAAI,YAHZD,QAAQC,IAAI,8BAA+BN,EAAIC,YCzBpB,SAACD,GAChC,IACIO,EAA8D,KAA7CP,EAAIQ,SAASC,YADX,MAGjBC,EAAY,uCAAG,4BAAAC,EAAA,sEACMX,EAAIY,qBADV,OACbC,EADa,OAEnBN,EAA4D,KAA3CM,EAAWJ,YALP,MAOrBJ,QAAQC,IAAI,eAAgBO,GAC5BR,QAAQC,IAAI,iBAAkBO,EAAWC,UAEzCC,WAAWL,EAAcH,GAPN,2CAAH,qDAUlBQ,WAAWL,EAAcH,GDYrBS,CAAkBhB,KAYpBiB,UANgB,SAACjB,GACjBK,QAAQC,IAAI,sBAAuBN,IAMnCP,WACAyB,YAAY,EACZC,WAAY,YALNtB,OAQR,OACE,wBACEuB,QAASvB,EACTwB,UAAU,0DAFZ,SAIE,yDEjDN,IAAM5B,EAAWC,mIAAYC,4BAA8B,GAEpD,SAAS2B,IACd,IAQQC,EAAYC,0BAAgB,CAClC/B,WACAgC,gBAVsB,WACtBC,MAAM,6BAUNT,UAPgB,WAChBZ,QAAQC,IAAI,qBAGNiB,QAMR,OACE,wBACEH,QAASG,EACTF,UAAU,0DAFZ,SAIE,8CClBN,IAYeM,EAZH,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MACb,OACE,qCACE,6BAAKA,IACL,gCACE,cAAChC,EAAD,IACA,cAAC0B,EAAD,WCEOO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKZ,MAAM,eAEba,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.28239cfe.chunk.js","sourcesContent":["import {\n  useGoogleLogin,\n  GoogleLoginResponse,\n  GoogleLoginResponseOffline,\n} from \"react-google-login\";\n\nimport { refreshTokenSetup } from \"../utils/refreshTokenSetup\";\n\nconst clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID || \"\";\n\nconst isOnline = (res: any): res is GoogleLoginResponse => {\n  if ((res as GoogleLoginResponse).profileObj) {\n    return true;\n  }\n  return false;\n};\n\nconst isOffline = (res: any): res is GoogleLoginResponseOffline => {\n  if ((res as GoogleLoginResponseOffline).code) {\n    return true;\n  }\n  return false;\n};\n\nexport function LoginButton() {\n  const onSuccess = (res: GoogleLoginResponse | GoogleLoginResponseOffline) => {\n    if (isOnline(res)) {\n      console.log(\"Login success: currentUser:\", res.profileObj);\n      refreshTokenSetup(res);\n    } else if (isOffline(res)) {\n      console.log(\"Offline\");\n    }\n  };\n\n  const onFailure = (res: any) => {\n    console.log(\"Login failed: res: \", res);\n  };\n\n  const { signIn } = useGoogleLogin({\n    onSuccess,\n    onFailure,\n    clientId,\n    isSignedIn: true,\n    accessType: \"offline\",\n  });\n\n  return (\n    <button\n      onClick={signIn}\n      className=\"bg-gray-700 rounded-xl py-2 px-4 inline-flex text-white\"\n    >\n      <span>Sign in with Google</span>\n    </button>\n  );\n}\n","import { GoogleLoginResponse } from \"react-google-login\";\n\nexport const refreshTokenSetup = (res: GoogleLoginResponse) => {\n  const defaultTimeOut = 3600 - 5 * 60;\n  let refreshTiming = (res.tokenObj.expires_in || defaultTimeOut) * 1000;\n\n  const refreshToken = async () => {\n    const newAuthRes = await res.reloadAuthResponse();\n    refreshTiming = (newAuthRes.expires_in || defaultTimeOut) * 1000;\n\n    console.log(\"newAuthRes: \", newAuthRes);\n    console.log(\"new auth token\", newAuthRes.id_token);\n\n    setTimeout(refreshToken, refreshTiming);\n  };\n\n  setTimeout(refreshToken, refreshTiming);\n};\n","import { useGoogleLogout } from \"react-google-login\";\n\nconst clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID || \"\";\n\nexport function LogoutButton() {\n  const onLogoutSuccess = () => {\n    alert(\"Logged out successfully!\");\n  };\n\n  const onFailure = () => {\n    console.log(\"Logout failed.\");\n  };\n\n  const { signOut } = useGoogleLogout({\n    clientId,\n    onLogoutSuccess,\n    onFailure,\n  });\n\n  return (\n    <button\n      onClick={signOut}\n      className=\"bg-gray-700 rounded-xl py-2 px-4 inline-flex text-white\"\n    >\n      <span>Sign out</span>\n    </button>\n  );\n}\n","import { LoginButton, LogoutButton } from \"./components\";\n\ninterface Props {\n  title: string;\n}\n\nconst App = ({ title }: Props) => {\n  return (\n    <>\n      <h1>{title}</h1>\n      <nav>\n        <LoginButton />\n        <LogoutButton />\n      </nav>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App title=\"pro-file\" />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}